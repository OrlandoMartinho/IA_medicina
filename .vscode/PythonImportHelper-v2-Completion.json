[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "controller",
        "importPath": "controller",
        "description": "controller",
        "isExtraImport": true,
        "detail": "controller",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "CountVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "MultinomialNB",
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "isExtraImport": true,
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "make_pipeline",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "CalibratedClassifierCV",
        "importPath": "sklearn.calibration",
        "description": "sklearn.calibration",
        "isExtraImport": true,
        "detail": "sklearn.calibration",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 2,
        "importPath": "controller.controller",
        "description": "controller.controller",
        "peekOfCode": "def models():\n    return ['models/model_hipotese.pkl','models/model_tratamento.pkl']\ndef data_set():\n    return 'data_set/forhealth_data.csv'",
        "detail": "controller.controller",
        "documentation": {}
    },
    {
        "label": "data_set",
        "kind": 2,
        "importPath": "controller.controller",
        "description": "controller.controller",
        "peekOfCode": "def data_set():\n    return 'data_set/forhealth_data.csv'",
        "detail": "controller.controller",
        "documentation": {}
    },
    {
        "label": "nome_arquivo",
        "kind": 5,
        "importPath": "data_clean.data_clean",
        "description": "data_clean.data_clean",
        "peekOfCode": "nome_arquivo = 'forhealth_data.csv'\ndf = pd.read_csv(nome_arquivo)\nprint(df.describe())\ncontagem_por_mes = df['hipotese'].value_counts()\nplt.figure(figsize=(10, 6))\ncontagem_por_mes.plot(kind='bar', color='skyblue')\nplt.title('Número de casos de Hanseníase por mês')\nplt.xlabel('Mês')\nplt.ylabel('Número de casos')\nplt.show()",
        "detail": "data_clean.data_clean",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "data_clean.data_clean",
        "description": "data_clean.data_clean",
        "peekOfCode": "df = pd.read_csv(nome_arquivo)\nprint(df.describe())\ncontagem_por_mes = df['hipotese'].value_counts()\nplt.figure(figsize=(10, 6))\ncontagem_por_mes.plot(kind='bar', color='skyblue')\nplt.title('Número de casos de Hanseníase por mês')\nplt.xlabel('Mês')\nplt.ylabel('Número de casos')\nplt.show()",
        "detail": "data_clean.data_clean",
        "documentation": {}
    },
    {
        "label": "contagem_por_mes",
        "kind": 5,
        "importPath": "data_clean.data_clean",
        "description": "data_clean.data_clean",
        "peekOfCode": "contagem_por_mes = df['hipotese'].value_counts()\nplt.figure(figsize=(10, 6))\ncontagem_por_mes.plot(kind='bar', color='skyblue')\nplt.title('Número de casos de Hanseníase por mês')\nplt.xlabel('Mês')\nplt.ylabel('Número de casos')\nplt.show()",
        "detail": "data_clean.data_clean",
        "documentation": {}
    },
    {
        "label": "nome_arquivo",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "nome_arquivo = controller.data_set()\ndf = pd.read_csv(nome_arquivo)\ncolunas_interesse = ['mes', 'sintomas', 'tratamento', 'bairro', 'queixa', 'hipotese']\ndf = df[colunas_interesse].dropna()\nX_train, X_test, y_train_tratamento, y_test_tratamento, y_train_hipotese, y_test_hipotese = train_test_split(\n    df['sintomas'], df['tratamento'], df['hipotese'], test_size=0.2, random_state=42\n)\nmodel_tratamento = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_tratamento_calibrated = CalibratedClassifierCV(model_tratamento, method='sigmoid')\nmodel_tratamento_calibrated.fit(X_train, y_train_tratamento)",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "df = pd.read_csv(nome_arquivo)\ncolunas_interesse = ['mes', 'sintomas', 'tratamento', 'bairro', 'queixa', 'hipotese']\ndf = df[colunas_interesse].dropna()\nX_train, X_test, y_train_tratamento, y_test_tratamento, y_train_hipotese, y_test_hipotese = train_test_split(\n    df['sintomas'], df['tratamento'], df['hipotese'], test_size=0.2, random_state=42\n)\nmodel_tratamento = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_tratamento_calibrated = CalibratedClassifierCV(model_tratamento, method='sigmoid')\nmodel_tratamento_calibrated.fit(X_train, y_train_tratamento)\naccuracy_tratamento = model_tratamento_calibrated.score(X_test, y_test_tratamento)",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "colunas_interesse",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "colunas_interesse = ['mes', 'sintomas', 'tratamento', 'bairro', 'queixa', 'hipotese']\ndf = df[colunas_interesse].dropna()\nX_train, X_test, y_train_tratamento, y_test_tratamento, y_train_hipotese, y_test_hipotese = train_test_split(\n    df['sintomas'], df['tratamento'], df['hipotese'], test_size=0.2, random_state=42\n)\nmodel_tratamento = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_tratamento_calibrated = CalibratedClassifierCV(model_tratamento, method='sigmoid')\nmodel_tratamento_calibrated.fit(X_train, y_train_tratamento)\naccuracy_tratamento = model_tratamento_calibrated.score(X_test, y_test_tratamento)\nprint(f'Acurácia do modelo de Tratamento: {accuracy_tratamento:.2f}')",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "df = df[colunas_interesse].dropna()\nX_train, X_test, y_train_tratamento, y_test_tratamento, y_train_hipotese, y_test_hipotese = train_test_split(\n    df['sintomas'], df['tratamento'], df['hipotese'], test_size=0.2, random_state=42\n)\nmodel_tratamento = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_tratamento_calibrated = CalibratedClassifierCV(model_tratamento, method='sigmoid')\nmodel_tratamento_calibrated.fit(X_train, y_train_tratamento)\naccuracy_tratamento = model_tratamento_calibrated.score(X_test, y_test_tratamento)\nprint(f'Acurácia do modelo de Tratamento: {accuracy_tratamento:.2f}')\nmodel_hipotese = make_pipeline(CountVectorizer(), MultinomialNB())",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "model_tratamento",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "model_tratamento = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_tratamento_calibrated = CalibratedClassifierCV(model_tratamento, method='sigmoid')\nmodel_tratamento_calibrated.fit(X_train, y_train_tratamento)\naccuracy_tratamento = model_tratamento_calibrated.score(X_test, y_test_tratamento)\nprint(f'Acurácia do modelo de Tratamento: {accuracy_tratamento:.2f}')\nmodel_hipotese = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_hipotese_calibrated = CalibratedClassifierCV(model_hipotese, method='sigmoid')\nmodel_hipotese_calibrated.fit(X_train, y_train_hipotese)\naccuracy_hipotese = model_hipotese_calibrated.score(X_test, y_test_hipotese)\nprint(f'Acurácia do modelo de Hipótese: {accuracy_hipotese:.2f}')",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "model_tratamento_calibrated",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "model_tratamento_calibrated = CalibratedClassifierCV(model_tratamento, method='sigmoid')\nmodel_tratamento_calibrated.fit(X_train, y_train_tratamento)\naccuracy_tratamento = model_tratamento_calibrated.score(X_test, y_test_tratamento)\nprint(f'Acurácia do modelo de Tratamento: {accuracy_tratamento:.2f}')\nmodel_hipotese = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_hipotese_calibrated = CalibratedClassifierCV(model_hipotese, method='sigmoid')\nmodel_hipotese_calibrated.fit(X_train, y_train_hipotese)\naccuracy_hipotese = model_hipotese_calibrated.score(X_test, y_test_hipotese)\nprint(f'Acurácia do modelo de Hipótese: {accuracy_hipotese:.2f}')\njoblib.dump(model_tratamento_calibrated,'../'+ controller.models()[1])",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "accuracy_tratamento",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "accuracy_tratamento = model_tratamento_calibrated.score(X_test, y_test_tratamento)\nprint(f'Acurácia do modelo de Tratamento: {accuracy_tratamento:.2f}')\nmodel_hipotese = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_hipotese_calibrated = CalibratedClassifierCV(model_hipotese, method='sigmoid')\nmodel_hipotese_calibrated.fit(X_train, y_train_hipotese)\naccuracy_hipotese = model_hipotese_calibrated.score(X_test, y_test_hipotese)\nprint(f'Acurácia do modelo de Hipótese: {accuracy_hipotese:.2f}')\njoblib.dump(model_tratamento_calibrated,'../'+ controller.models()[1])\njoblib.dump(model_hipotese_calibrated, '../'+controller.models()[0])",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "model_hipotese",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "model_hipotese = make_pipeline(CountVectorizer(), MultinomialNB())\nmodel_hipotese_calibrated = CalibratedClassifierCV(model_hipotese, method='sigmoid')\nmodel_hipotese_calibrated.fit(X_train, y_train_hipotese)\naccuracy_hipotese = model_hipotese_calibrated.score(X_test, y_test_hipotese)\nprint(f'Acurácia do modelo de Hipótese: {accuracy_hipotese:.2f}')\njoblib.dump(model_tratamento_calibrated,'../'+ controller.models()[1])\njoblib.dump(model_hipotese_calibrated, '../'+controller.models()[0])",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "model_hipotese_calibrated",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "model_hipotese_calibrated = CalibratedClassifierCV(model_hipotese, method='sigmoid')\nmodel_hipotese_calibrated.fit(X_train, y_train_hipotese)\naccuracy_hipotese = model_hipotese_calibrated.score(X_test, y_test_hipotese)\nprint(f'Acurácia do modelo de Hipótese: {accuracy_hipotese:.2f}')\njoblib.dump(model_tratamento_calibrated,'../'+ controller.models()[1])\njoblib.dump(model_hipotese_calibrated, '../'+controller.models()[0])",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "accuracy_hipotese",
        "kind": 5,
        "importPath": "treinning.treinning",
        "description": "treinning.treinning",
        "peekOfCode": "accuracy_hipotese = model_hipotese_calibrated.score(X_test, y_test_hipotese)\nprint(f'Acurácia do modelo de Hipótese: {accuracy_hipotese:.2f}')\njoblib.dump(model_tratamento_calibrated,'../'+ controller.models()[1])\njoblib.dump(model_hipotese_calibrated, '../'+controller.models()[0])",
        "detail": "treinning.treinning",
        "documentation": {}
    },
    {
        "label": "model_tratamento_calibrated",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "model_tratamento_calibrated = joblib.load(controller.models()[1])\nmodel_hipotese_calibrated = joblib.load(controller.models()[0])\nnovo_sintoma = [\"dor de cabeça\"]\nprevisao_tratamento = model_tratamento_calibrated.predict(novo_sintoma)\nprob_tratamento = model_tratamento_calibrated.predict_proba(novo_sintoma).max()\nprevisao_hipotese = model_hipotese_calibrated.predict(novo_sintoma)\nprob_hipotese = model_hipotese_calibrated.predict_proba(novo_sintoma).max()\nprint(f'Sintoma: {novo_sintoma}')\nprint(f'Previsão de Tratamento: {previsao_tratamento[0]} com {prob_tratamento * 100:.2f}% de confiança')\nprint(f'Previsão de Hipótese: {previsao_hipotese[0]} com {prob_hipotese * 100:.2f}% de confiança')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "model_hipotese_calibrated",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "model_hipotese_calibrated = joblib.load(controller.models()[0])\nnovo_sintoma = [\"dor de cabeça\"]\nprevisao_tratamento = model_tratamento_calibrated.predict(novo_sintoma)\nprob_tratamento = model_tratamento_calibrated.predict_proba(novo_sintoma).max()\nprevisao_hipotese = model_hipotese_calibrated.predict(novo_sintoma)\nprob_hipotese = model_hipotese_calibrated.predict_proba(novo_sintoma).max()\nprint(f'Sintoma: {novo_sintoma}')\nprint(f'Previsão de Tratamento: {previsao_tratamento[0]} com {prob_tratamento * 100:.2f}% de confiança')\nprint(f'Previsão de Hipótese: {previsao_hipotese[0]} com {prob_hipotese * 100:.2f}% de confiança')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "novo_sintoma",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "novo_sintoma = [\"dor de cabeça\"]\nprevisao_tratamento = model_tratamento_calibrated.predict(novo_sintoma)\nprob_tratamento = model_tratamento_calibrated.predict_proba(novo_sintoma).max()\nprevisao_hipotese = model_hipotese_calibrated.predict(novo_sintoma)\nprob_hipotese = model_hipotese_calibrated.predict_proba(novo_sintoma).max()\nprint(f'Sintoma: {novo_sintoma}')\nprint(f'Previsão de Tratamento: {previsao_tratamento[0]} com {prob_tratamento * 100:.2f}% de confiança')\nprint(f'Previsão de Hipótese: {previsao_hipotese[0]} com {prob_hipotese * 100:.2f}% de confiança')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "previsao_tratamento",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "previsao_tratamento = model_tratamento_calibrated.predict(novo_sintoma)\nprob_tratamento = model_tratamento_calibrated.predict_proba(novo_sintoma).max()\nprevisao_hipotese = model_hipotese_calibrated.predict(novo_sintoma)\nprob_hipotese = model_hipotese_calibrated.predict_proba(novo_sintoma).max()\nprint(f'Sintoma: {novo_sintoma}')\nprint(f'Previsão de Tratamento: {previsao_tratamento[0]} com {prob_tratamento * 100:.2f}% de confiança')\nprint(f'Previsão de Hipótese: {previsao_hipotese[0]} com {prob_hipotese * 100:.2f}% de confiança')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "prob_tratamento",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "prob_tratamento = model_tratamento_calibrated.predict_proba(novo_sintoma).max()\nprevisao_hipotese = model_hipotese_calibrated.predict(novo_sintoma)\nprob_hipotese = model_hipotese_calibrated.predict_proba(novo_sintoma).max()\nprint(f'Sintoma: {novo_sintoma}')\nprint(f'Previsão de Tratamento: {previsao_tratamento[0]} com {prob_tratamento * 100:.2f}% de confiança')\nprint(f'Previsão de Hipótese: {previsao_hipotese[0]} com {prob_hipotese * 100:.2f}% de confiança')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "previsao_hipotese",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "previsao_hipotese = model_hipotese_calibrated.predict(novo_sintoma)\nprob_hipotese = model_hipotese_calibrated.predict_proba(novo_sintoma).max()\nprint(f'Sintoma: {novo_sintoma}')\nprint(f'Previsão de Tratamento: {previsao_tratamento[0]} com {prob_tratamento * 100:.2f}% de confiança')\nprint(f'Previsão de Hipótese: {previsao_hipotese[0]} com {prob_hipotese * 100:.2f}% de confiança')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "prob_hipotese",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "prob_hipotese = model_hipotese_calibrated.predict_proba(novo_sintoma).max()\nprint(f'Sintoma: {novo_sintoma}')\nprint(f'Previsão de Tratamento: {previsao_tratamento[0]} com {prob_tratamento * 100:.2f}% de confiança')\nprint(f'Previsão de Hipótese: {previsao_hipotese[0]} com {prob_hipotese * 100:.2f}% de confiança')",
        "detail": "main",
        "documentation": {}
    }
]